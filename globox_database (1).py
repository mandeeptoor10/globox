# -*- coding: utf-8 -*-
"""Globox_database.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/mandeeptoor10/thefinalproject/blob/main/Globox_database.ipynb

analysis using SQL queries
"""

import psycopg2
import pandas as pd
def read_query_function(query):
    connection_string='postgres://Test:bQNxVzJL4g6u@ep-noisy-flower-846766-pooler.us-east-2.aws.neon.tech/Globox'
    conn = psycopg2.connect(connection_string)
    data_frame = pd.read_sql_query(query,conn)
    conn.close()
    return data_frame

"""connect the all three data bases"""

query1='''
-- --
SELECT *
FROM users

JOIN activity
ON users.id = activity.uid
-- join 'users' and  'groups' with matching user IDs
JOIN groups
ON users.id= groups.uid
'''
read_query_function(query1)

"""users who buy once"""

# query 2
query2='''SELECT activity.uid, COUNT(*) AS buy_onces
FROM activity
GROUP BY activity.uid
HAVING COUNT(*) < 2;'''
read_query_function(query2)

"""using left join to connect he data base users and activity tables"""

# query 3
query3='''SELECT *
FROM users
left JOIN activity
ON users.id = activity.uid;'''
read_query_function(query3)

"""SQL COALESCE function using to fill in NULL values"""

query4='''SELECT uid, COALESCE(activity.device, 'Unknown') AS device, COALESCE(activity.spent, 0 ) AS spent
FROM Activity;'''
read_query_function(query4)

"""start and end dates of the experiment"""

query5='''SELECT MIN(dt) AS first_join_date, MAX(dt) AS last_join_date
FROM activity;'''
read_query_function(query5)

"""total users"""

query6='''SELECT COUNT(DISTINCT uid) AS num_users_in_experiment
FROM groups;'''
read_query_function(query6)

"""How many users were in the control and treatment groups"""

query7 = '''
WITH user_spend AS (
  SELECT  uid, SUM(spent) AS total_spend, COUNT(*) as cnt_purchases
  FROM activity
  GROUP BY uid
),
joined AS (
  SELECT
    uid,gender, country,
    g.group as grp,
    CASE
      WHEN g.group = 'A' THEN 'control'
      WHEN g.group = 'B' THEN 'treatment'
      ELSE 'problem!'
    END AS cluster,
    CASE WHEN cnt_purchases > 0 THEN 1 ELSE 0 END AS converted
  FROM users
  LEFT JOIN groups g ON uid = id
  LEFT JOIN user_spend USING (uid)
)

SELECT
  cluster,
  COUNT(*) AS total_users
FROM joined
GROUP BY cluster;

'''
read_query_function(query7)

"""conversion rate of all users

"""

query8='''WITH user_spend AS (
  SELECT
    uid,
    SUM(spent) AS total_spend,
    COUNT(*) as cnt_purchases
  FROM activity
  GROUP BY uid
),

joined AS (
  SELECT
    uid,
    gender,
    country,
    g.group as grp,
    CASE
      WHEN g.group = 'A' THEN 'control'
      WHEN g.group = 'B' THEN 'treatment'
      ELSE 'problem!'
    END AS cluster,
    CASE WHEN cnt_purchases > 0 THEN 1 ELSE 0 END AS converted
  FROM users
  LEFT JOIN groups g ON uid = id
  LEFT JOIN user_spend USING (uid)
)

SELECT
  SUM(converted) * 1.0 / COUNT(*) AS overall_conversion_rate
FROM joined;'''
read_query_function(query8)

"""conversion rate for the control and treatment groups"""

query9='''WITH user_spend AS (
  SELECT
    uid,
    SUM(spent) AS total_spend,
    COUNT(*) as cnt_purchases
  FROM activity
  GROUP BY uid
),

joined AS (
  SELECT
    uid,
    gender,
    country,
    g.group as grp,
    CASE
      WHEN g.group = 'A' THEN 'control'
      WHEN g.group = 'B' THEN 'treatment'
      ELSE 'problem!'
    END AS cluster,
    CASE WHEN cnt_purchases > 0 THEN 1 ELSE 0 END AS converted
  FROM users
  LEFT JOIN groups g ON uid = id
  LEFT JOIN user_spend USING (uid)
)

SELECT
  cluster,
  COUNT(*) AS total_users,
  SUM(converted) AS converted_users,
  SUM(converted) * 1.0 / COUNT(*) AS conversion_rate
FROM joined
GROUP BY cluster;'''
read_query_function(query9)

""" average amount spent per user for the control and treatment groups, including users who did not conver"""

query10='''WITH user_spend AS (
  SELECT
    uid,
    SUM(spent) AS total_spend,
    COUNT(*) as cnt_purchases
  FROM activity
  GROUP BY uid
),

joined AS (
  SELECT
    uid,gender, country,
    g.group as grp,
    CASE
      WHEN g.group = 'A' THEN 'control'
      WHEN g.group = 'B' THEN 'treatment'
      ELSE 'problem!'
    END AS cluster,
    CASE WHEN cnt_purchases > 0 THEN 1 ELSE 0 END AS converted,
    total_spend
  FROM users
  LEFT JOIN groups g ON uid = id
  LEFT JOIN user_spend USING (uid)
)

SELECT
  cluster,
  AVG(total_spend) AS avg_spend_per_user
FROM joined
GROUP BY cluster;'''
read_query_function(query10)

"""users who did not convert when calculating the average amount spent per user"""

query11='''WITH user_spend AS (
  SELECT
    uid,
    SUM(spent) AS total_spend,
    COUNT(*) as cnt_purchases
  FROM activity
  GROUP BY uid
),

joined AS (
  SELECT
    uid,
    gender,
    country,
    g.group as grp,
    CASE
      WHEN g.group = 'A' THEN 'control'
      WHEN g.group = 'B' THEN 'treatment'
      ELSE 'problem!'
    END AS cluster,
    CASE WHEN cnt_purchases > 0 THEN 1 ELSE 0 END AS converted
  FROM users
  LEFT JOIN groups g ON uid = id
  LEFT JOIN user_spend USING (uid)
)

SELECT
  cluster,
  COUNT(*) AS total_users,
  SUM(converted) AS converted_users,
  SUM(converted) * 1.0 / COUNT(*) AS conversion_rate
FROM joined
GROUP BY cluster;'''
read_query_function(query11)

query12st = '''SELECT
  distinct u.id AS user_id,
  u.country,
  u.gender,
  g.group AS test_group,
  g.device,
 --CASE WHEN a.spent > 0 THEN 'YES' ELSE 'NO' END as converted ,
 SUM(COALESCE(a.spent, 0)) AS total_spent
 FROM users u
 LEFT JOIN groups g ON u.id = g.uid
 LEFT JOIN activity a ON u.id = a.uid
 --WHERE a.spent > 0
 GROUP BY u.id, u.country, u.gender, g.group,g.device ;'''
read_query_function(query12st)